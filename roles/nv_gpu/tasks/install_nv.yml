- name: Ensure that the GPU Operator PackageManifest exists
  command: oc get packagemanifests/gpu-operator-certified -n openshift-marketplace

- name: Create the namespace for the GPU Operator
  command: oc apply -f "{{ gpu_operator_namespace }}"

- name: Create the OperatorGroup object
  command: oc apply -f "{{ gpu_operator_operatorgroup }}"

- name: Save the GPU Operator PackageManifest (debug)
  ignore_errors: true
  shell:
    oc get packagemanifests/gpu-operator-certified -n openshift-marketplace -oyaml
    > {{ artifact_extra_logs_dir }}/gpu_operator_packagemanifest.yml
  when: artifact_extra_logs_dir | default('', true) | trim != ''

- block:
  - name: Get the version of the GPU Operator on OperatorHub
    shell:
      oc get packagemanifests/gpu-operator-certified -n openshift-marketplace -ojson
      | jq -r .status.channels[0].currentCSV
    register: gpu_operator_csv_name_cmd
  - name: Store the CSV version
    set_fact:
      gpu_operator_csv_name: "{{ gpu_operator_csv_name_cmd.stdout }}"
  when: gpu_operator_operatorhub_version == ''

- block:
  - name: Get the version of the GPU Operator on OperatorHub
    command: echo "gpu-operator-certified.v{{ gpu_operator_operatorhub_version }}"
    register: gpu_operator_csv_name_cmd
  - name: Store the CSV version
    set_fact:
      gpu_operator_csv_name: "{{ gpu_operator_csv_name_cmd.stdout }}"
  when: gpu_operator_operatorhub_version != ''

- name: "Create the OperatorHub subscription for {{ gpu_operator_csv_name }}"
  debug:
    msg: "{{ gpu_operator_csv_name }}"

- name: "Create the OperatorHub subscription for {{ gpu_operator_csv_name }}"
  shell:
    cat {{ gpu_operator_operatorhub_sub }}
    | sed 's|{{ '{{' }} startingCSV {{ '}}' }}|{{ gpu_operator_csv_name }}|'
    | oc apply -f-
  args:
    warn: false # don't warn about using sed here

- block:
  - name: Find the GPU Operator OperatorHub InstallPlan
    # TODO: use 'oc get installplan -loperators.coreos.com/gpu-operator-certified.openshift-operators'
    # when we get rid of OCP 4.5 support
    command:
      oc get Subscription/gpu-operator-certified
         -n openshift-operators
         -ojsonpath={@.status.installPlanRef.name}
    register: gpu_operator_installplan_name
    until: gpu_operator_installplan_name.stdout != ""
    retries: 20
    delay: 30

  - name: "Approve the GPU Operator OperatorHub InstallPlan"
    command:
      oc patch InstallPlan/{{ gpu_operator_installplan_name.stdout }}
         -n openshift-operators
         --type merge
         --patch '{"spec":{"approved":true}}'

  - name: "Wait for the GPU Operator OperatorHub ClusterServiceVersion"
    command:
      oc get ClusterServiceVersion/{{ gpu_operator_csv_name }}
         -oname
         -n openshift-operators
    register: gpu_operator_wait_csv
    until: gpu_operator_wait_csv.stdout != ""
    retries: 40
    delay: 30

  rescue:
  - name: Capture the Catalog Operator logs (debug)
    command: oc logs deployment.apps/catalog-operator -n openshift-operator-lifecycle-manager
    register: catalog_operator_logs
    when: artifact_extra_logs_dir | default('', true) | trim != ''
    ignore_errors: true
    no_log: true

  - copy:
      dest: "{{ artifact_extra_logs_dir }}/catalog_operator.logs"
      content: "{{ catalog_operator_logs.stdout }}"
    when: artifact_extra_logs_dir | default('', true) | trim != ''

  - debug:
      msg: "The logs of Catalog-operator have been saved in {{ artifact_extra_logs_dir }}/catalog_operator.logs"
    when: artifact_extra_logs_dir | default('', true) | trim != ''

  - fail:
      msg: Failed because the GPU Operator could not be install from the Catalog Operator

- name: Create a temporary file for the GPU Operator clusterpolicy
  ansible.builtin.tempfile:
    state: file
    suffix: .clusterpolicy.temp.yaml
  register: gpu_operator_clusterpolicy_tempfile

- name: Get the clusterpolicy of the GPU Operator from OperatorHub CSV
  shell:
    set -o pipefail;
    oc get ClusterServiceVersion/{{ gpu_operator_csv_name }}
       -n openshift-operators
       -ojson
    | jq -r '.metadata.annotations."alm-examples"'
    | jq .[0] > {{ gpu_operator_clusterpolicy_tempfile.path }}
  register: operatorhub_clusterpolicy
  until: operatorhub_clusterpolicy.rc == 0
  retries: 20
  delay: 15

- name: Save the clusterpolicy of the GPU Operator from OperatorHub (debug)
  copy:
    src: "{{ gpu_operator_clusterpolicy_tempfile.path }}"
    dest: "{{ artifact_extra_logs_dir }}/gpu_operator_clusterpolicy.json"
  delegate_to: localhost
  when: artifact_extra_logs_dir | default('', true) | trim != ''
  ignore_errors: true

- block:
  - name: Create the clusterPolicy CR for the GPU Operator
    command: oc apply -f "{{ gpu_operator_clusterpolicy_tempfile.path }}"
    register: test_clusterpolicy_cr
    until: test_clusterpolicy_cr.rc != 1
    retries: 20
    delay: 15

  rescue:
  - name: Inspect the Subscriptions status (debug)
    shell:
      (oc get subscriptions -n openshift-operators &&
       oc describe subscriptions/gpu-operator-certified -n openshift-operators)
       > {{ artifact_extra_logs_dir }}/gpu_operator_Subscription.log
    ignore_errors: true
    when: artifact_extra_logs_dir | default('', true) | trim != ''

  - name: Get the ClusterServiceVersion status (debug)
    shell:
      (oc get ClusterServiceVersion -A &&
       oc describe "ClusterServiceVersion/{{ gpu_operator_csv_name }}" -n openshift-operators)
       > {{ artifact_extra_logs_dir }}/gpu_operator_ClusterServiceVersion.log
    when: artifact_extra_logs_dir | default('', true) | trim != ''
    ignore_errors: true

  - name: Failing because the ClusterPolicy CR cannot be created
    fail:
      msg: Failed because the ClusterPolicy CR cannot be created

- block:
  - name: Check if the namespace has the openshift.io/cluster-monitoring label
    shell: oc get ns -l openshift.io/cluster-monitoring -oname | grep gpu-operator-resources
  rescue:
  - name: Get the namespace yaml specification
    command: oc get ns/gpu-operator-resources -oyaml
  - name: Make sure that namespace has the openshift.io/cluster-monitoring label
    command: oc label ns/gpu-operator-resources openshift.io/cluster-monitoring=true
