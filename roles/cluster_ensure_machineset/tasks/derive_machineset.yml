---
- name: Get the names of an existing worker machinesets (of any instance type)
  command:
    oc get machinesets -n openshift-machine-api -o
    jsonpath='{range .items[?(@.spec.template.metadata.labels.machine\.openshift\.io/cluster-api-machine-role=="worker")]}{.metadata.name}{"\n"}{end}'
  register: oc_get_machinesets
  failed_when: not oc_get_machinesets.stdout

- name: Set base_machineset
  command:
    echo {{ oc_get_machinesets.stdout[0] }}
  register: base_machineset
  when: not base_machineset 

- name: Ensure that the base machineset exists
  command: oc get machinesets/{{ base_machineset }} -oname
  register: machineset_exists
  failed_when: not machineset_exists

- name: Store the MachineSet json definition in a file
  shell:
    oc get 'machineset/{{ base_machineset }}'
       -n openshift-machine-api
       -o json
       > {{ artifact_extra_logs_dir }}/source_machineset.json

- name: Update the MachineSet with the requested instance type ({{ machineset_instance_type }}) and store in a file
  shell:
    "{{ reconfigure_machineset }}
      {{ artifact_extra_logs_dir }}/source_machineset.json
      {{ machineset_instance_type }}
      > {{ artifact_extra_logs_dir }}/new_machineset.json"

- name: Get the name of the new MachineSet
  command: jq -r .metadata.name -- '{{ artifact_extra_logs_dir }}/new_machineset.json'
  register: new_machineset_name

- name: Search if new the MachineSet resource already exists
  command: oc get 'machineset/{{ new_machineset_name.stdout }}' -n openshift-machine-api -oname
  register: has_machineset
  failed_when: false

- name: Create the new MachineSet resource if it does not exist
  command: oc create -f '{{ artifact_extra_logs_dir }}/new_machineset.json'
  when: not has_machineset.stdout
