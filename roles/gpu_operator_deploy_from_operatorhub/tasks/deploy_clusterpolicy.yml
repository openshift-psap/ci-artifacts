---
- name: Wait for the GPU Operator OperatorHub ClusterServiceVersion name. Use different methods for OCP 4.5 vs more recent
  block:
  - name: Use 'rescue' block for OCP 4.5
    when: openshift_release == "4.5"
    fail: msg="Label operators.coreos.com/gpu-operator-certified.openshift-operators not available in OCP 4.5"

  - name: Wait for the GPU Operator OperatorHub ClusterServiceVersion name (except v4.5)
    command:
      oc get ClusterServiceVersion
         -l operators.coreos.com/gpu-operator-certified.openshift-operators
         -oname
         -n openshift-operators
    register: gpu_operator_csv_name_cmd
    until: gpu_operator_csv_name_cmd.stdout != ""
    retries: 15
    delay: 30

  rescue:
  - name: Wait for the GPU Operator OperatorHub ClusterServiceVersion name (only v4.5)
    shell:
      set -o pipefail;
      oc get ClusterServiceVersion
         -oname
         -n openshift-operators
         | grep /gpu-operator-certified
    register: gpu_operator_csv_name_cmd
    until: gpu_operator_csv_name_cmd.stdout != ""
    retries: 15
    delay: 30

- name: Get the clusterpolicy of the GPU Operator from OperatorHub CSV
  shell:
    set -o pipefail;
    oc get "{{ gpu_operator_csv_name_cmd.stdout }}"
       -n openshift-operators
       -ojson
    | jq -r '.metadata.annotations."alm-examples"'
    | jq .[0] > "{{ artifact_extra_logs_dir }}/gpu_operator_clusterpolicy.json"
  register: operatorhub_clusterpolicy
  until: operatorhub_clusterpolicy.rc == 0
  retries: 20
  delay: 15

- block:
  - name: Create the clusterPolicy CR for the GPU Operator
    command: oc apply -f "{{ artifact_extra_logs_dir }}/gpu_operator_clusterpolicy.json"
    register: test_clusterpolicy_cr
    until: test_clusterpolicy_cr.rc != 1
    retries: 20
    delay: 15

  rescue:
  - name: Inspect the Subscriptions status (debug)
    shell:
      (oc get subscriptions -n openshift-operators &&
       oc describe subscriptions/gpu-operator-certified -n openshift-operators)
       > {{ artifact_extra_logs_dir }}/gpu_operator_Subscription.log
    failed_when: false

  - name: Get the ClusterServiceVersion status (debug)
    shell:
      (oc get ClusterServiceVersion -A &&
       oc describe "{{ gpu_operator_csv_name_cmd.stdout }}" -n openshift-operators)
       > {{ artifact_extra_logs_dir }}/gpu_operator_ClusterServiceVersion.log
    failed_when: false

  - name: Failing because the ClusterPolicy CR cannot be created
    fail: msg="Failed because the ClusterPolicy CR cannot be created"

- name: Test if the ClusterPolicy has the 'validator' stanza
  command: oc get clusterpolicy.nvidia.com -ojsonpath='{range .items[*]}{.spec.validator.version}{end}'
  register: gpu_operator_atleast_v170
  failed_when: false

- name: Create the namespace for the GPU Operator (only < v1.7.0)
  when: not gpu_operator_atleast_v170.stdout
  block:
  - name: Create the namespace for the GPU Operator
    command: oc apply -f "{{ gpu_operator_namespace }}"

- name: Wait for the GPU Operator to create the namespace (only >= v1.7.0)
  when: gpu_operator_atleast_v170.stdout
  block:
  - name: Wait for the GPU Operator namespace
    # With the GPU Operator >v1.7.0, the namespace is created by the
    # operator, so it takes a few seconds before being available after the
    # deployment.
    command: oc get ns/gpu-operator-resources
    register: has_gpu_operator_namespace
    until: has_gpu_operator_namespace.rc == 0
    retries: 10
    delay: 10
