---
- name: Ensure that the secret properties file exists
  stat:
    path: "{{ rhods_test_jupyterlab_secret_properties }}"

- name: Ensure that the user count is set
  fail: msg="user count isn't set"
  when: rhods_test_jupyterlab_user_count | int < 0

- name: Ensure that the IDP name is set
  fail: msg="idp name isn't set"
  when: not rhods_test_jupyterlab_idp_name

- name: Ensure that the username prefix is set
  fail: msg="username prefix isn't set"
  when: not rhods_test_jupyterlab_username_prefix

- name: Define the test environments
  set_fact:
    rhods_test_image: image-registry.openshift-image-registry.svc:5000/{{ rhods_test_namespace }}/{{ rhods_test_istag }}
    rhods_notebook_namespace: rhods-notebooks

- name: Set system-under-test == driver-cluster if no system-under-test (SUT) is provided
  set_fact:
    sut_cluster_kubeconfig: "{{ rhods_test_jupyterlab_sut_cluster_kubeconfig | default(lookup('env', 'KUBECONFIG'), true) }}"

- name: Fetch RHODS endpoints from the SUT cluster
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  block:
  - name: Test the connectivity of the SUT cluster
    command: oc whoami --show-console

  - name: Get JupyterHub hostname (SUT cluster)
    command: oc get route/jupyterhub -n redhat-ods-applications -ojsonpath={.spec.host}
    register: jupyterhub_hostname_cmd

  - name: Get RHODS dashboard address (SUT cluster)
    command: oc get route/rhods-dashboard -n redhat-ods-applications -ojsonpath={.spec.host}
    register: rhods_dashboard_hostname_cmd

  - name: Get OCP console URL (SUT cluster)
    command: oc whoami --show-console
    register: oc_console_url_cmd

  - name: Get OCP API URL (SUT cluster)
    command: oc config view --minify -o jsonpath='{.clusters[0].cluster.server}'
    register: oc_api_url_cmd

  - name: Get the RHODS version
    shell:
      oc get csv -n redhat-ods-operator -ojsonpath={.items[0].spec.version}
    register: rhods_version_cmd

- name: Get the list of worker nodes
  command:
    oc get nodes
           -lnode-role.kubernetes.io/worker
           -ojsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
  register: worker_nodenames

- name: Prefetch the ODS-CI image on all the worker nodes (in parallel)
  command:
    oc debug istag/{{ rhods_test_istag }} \
             -n {{ rhods_test_namespace }} \
             --node-name="{{ item }}" \
             -- echo "Image prefetched on node/{{ item }}"
  loop: "{{ worker_nodenames.stdout_lines }}"

- name: Get the ODS-CI sample var file
  shell:
    oc debug istag/{{ rhods_test_istag }}
       -n {{ rhods_test_namespace }}
       -- cat test-variables.yml.model > /tmp/test-variables.yml.model

- name: Apply the ODS-CI template
  shell: |
    set -o pipefail;
    set -e;

    OCP_CONSOLE_URL="{{ oc_console_url_cmd.stdout }}";
    OCP_API_URL="{{ oc_api_url_cmd.stdout }}";
    ODH_DASHBOARD_URL="https://{{ rhods_dashboard_hostname_cmd.stdout }}";

    TEST_USER_AUTH_TYPE="{{ rhods_test_jupyterlab_idp_name }}";
    TEST_USER_USERNAME="{{ rhods_test_jupyterlab_username_prefix }}#{JOB_COMPLETION_INDEX}";

    export TEST_USER_PASSWORD="PASSWORD_WILL_BE_HERE";

    RHODS_VERSION="{{ rhods_version_cmd.stdout }}";

    BROWSER_OPTIONS="add_argument('--ignore-certificate-errors');add_argument('window-size=1920,1024');add_argument('--disable-dev-shm-usage');add_argument('--no-sandbox')"

    TEST_VAR_SAFE={{ artifact_extra_logs_dir }}/test-variables_safe.yml
    TEST_VAR_FULL=/tmp/test-variables.yml

    cat /tmp/test-variables.yml.model | \
      yq -y .OCP_CONSOLE_URL=\"${OCP_CONSOLE_URL}\" | \
      yq -y .OCP_API_URL=\"${OCP_API_URL}\" | \
      yq -y .ODH_DASHBOARD_URL=\"${ODH_DASHBOARD_URL}\" | \
      yq -y .RHODS_VERSION=\"${RHODS_VERSION}\" | \
      yq -y .TEST_USER.AUTH_TYPE=\"${TEST_USER_AUTH_TYPE}\" | \
      yq -y .TEST_USER.USERNAME=\"${TEST_USER_USERNAME}\" | \
      yq -y .BROWSER.NAME=\"headlesschrome\" | \
      yq -y ".BROWSER.OPTIONS=\"$BROWSER_OPTIONS\"" \
        > "$TEST_VAR_SAFE"

    cp "$TEST_VAR_SAFE" "$TEST_VAR_FULL"

    TEST_USER_PASSWORD="$(cat "{{ rhods_test_jupyterlab_secret_properties }}" | grep '^user_password=' | cut -d= -f2)";

    yq -yi .TEST_USER.PASSWORD=\"${TEST_USER_PASSWORD}\" "$TEST_VAR_FULL"

- name: Delete the ODS-CI secret, it it exists
  command:
    oc delete secret ods-ci-test-variables
       -n {{ rhods_test_namespace }}
       --ignore-not-found

- name: Create the ODS-CI secret
  command:
    oc create secret generic ods-ci-test-variables
       --from-file test-variables.yml=/tmp/test-variables.yml
       -n {{ rhods_test_namespace }}

- name: Delete the ODS-CI secret file
  file:
    path: /tmp/test-variables.yml
    state: absent

- name: Instantiate the RHODS tester job template
  template:
    src: "{{ rhods_test_jupyterlab_job }}"
    dest: "{{ artifact_extra_logs_dir }}/000_rhods_test_jupyterlab.yaml"
    mode: 0400

- name: Delete the RHODS test entrypoint, if it exists
  command:
    oc delete cm/rhods-jupyterlab-entrypoint
       -n {{ rhods_test_namespace }}
       --ignore-not-found

- name: Create the RHODS test entrypoint
  command:
    oc create cm rhods-jupyterlab-entrypoint
       "--from-file=entrypoint.sh={{ rhods_test_jupyterlab_entrypoint }}"
       "--from-file=artifacts-exporter.sh={{ rhods_test_jupyterlab_s3_artifacts_exporter_sidecar }}"
       "--from-file={{ rhods_test_jupyterlab_test_case_directory }}/{{ rhods_test_jupyterlab_ods_ci_test_case }}"
       -n {{ rhods_test_namespace }}

- name: Empty the Minio S3 bucket
  shell: |
    oc -c mc -n minio rsh $(oc get pod -lapp=minio -n minio -oname) \
       mc --config-dir /tmp rm minio/mybucket/ods-ci --recursive --force;
    oc -c mc -n minio rsh $(oc get pod -lapp=minio -n minio -oname) \
       rm -rf /artifacts/to_export  > /dev/null
    oc -c mc -n minio rsh $(oc get pod -lapp=minio -n minio -oname) \
       mc --config-dir /tmp cp /etc/os-release minio/mybucket; # without it, cp may fail if the bucket is empty
  failed_when: false

- name: Delete the RHODS tester job, if it exists
  command:
    oc delete
       -f "{{ artifact_extra_logs_dir }}/000_rhods_test_jupyterlab.yaml"
       --ignore-not-found
       -n {{ rhods_test_namespace }}

- name: Delete the events of the tester namespace
  shell:
    oc delete ev -n {{ rhods_test_namespace }} --all > /dev/null
  failed_when: false

- name: Delete the events, pods and PVC of the notebook namespace
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  command: |
    oc delete pod --all -n  {{ rhods_notebook_namespace }}
    oc delete pvc --all -n {{ rhods_notebook_namespace }}
    oc delete ev --all -n {{ rhods_notebook_namespace }}
  failed_when: false

- name: Name the namespace privileged
  command:
    oc adm policy add-scc-to-user privileged
       -z default
       -n {{ rhods_test_namespace }}

- name: Create the RHODS test job
  command:
    oc create
       -f "{{ artifact_extra_logs_dir }}/000_rhods_test_jupyterlab.yaml"
       -n {{ rhods_test_namespace }}

# ---

- name: Wait for the RHODS tester job to start
  shell:
    oc get jobs/ods-ci -ojsonpath={.status.startTime} -n {{ rhods_test_namespace }}
  register: wait_rhods_test_job_start
  retries: 12
  delay: 5
  until: wait_rhods_test_job_start.stdout

- name: Wait for the RHODS tester job to terminate
  shell:
    oc get jobs/ods-ci -ojsonpath={.status.active} -n {{ rhods_test_namespace }}
  register: wait_rhods_test_job
  retries: 60
  delay: 40
  until: not wait_rhods_test_job.stdout
  failed_when: false

# ---

- name: Cleanup the notebooks Pods and PVCs
  # (the Pods are destroyed anyway when the ods-ci test succeeds)
  shell: |
    oc delete pod --all -n {{ rhods_notebook_namespace }}
    oc delete pvc --all -n {{ rhods_notebook_namespace }}
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  ignore_errors: yes

- name: Get the status of the tester Pods
  shell:
    oc get pods -ljob-name=ods-ci
       -n {{ rhods_test_namespace }}
        > "{{ artifact_extra_logs_dir }}/tester_pods.status"
  ignore_errors: yes

- name: Get the status of the tester Job
  shell:
    oc get job/ods-ci
       -n {{ rhods_test_namespace }}
        > "{{ artifact_extra_logs_dir }}/tester_job.status"
  ignore_errors: yes

- name: Get the names of the tester_pods
  command:
    oc get pods -oname -ljob-name=ods-ci
       -n {{ rhods_test_namespace }}
  register: pod_names_cmd
  ignore_errors: yes

- name: Get the logs of the tester Pod
  shell: |
    oc logs {{ item }} \
         -c ods-ci \
         -n {{ rhods_test_namespace }} \
         > "{{ artifact_extra_logs_dir }}/tester_pod__$(basename "{{ item }}").log";

  loop: "{{ pod_names_cmd.stdout_lines }}"
  ignore_errors: yes

- name: Get the yaml of the tester Pods
  shell:
    oc get pods -ljob-name=ods-ci -oyaml
       -n {{ rhods_test_namespace }}
       > "{{ artifact_extra_logs_dir }}/tester_pods.yaml"
  ignore_errors: yes

- name: Get the yaml of the tester Job
  shell:
    oc get job/ods-ci -oyaml
       -n {{ rhods_test_namespace }}
       > "{{ artifact_extra_logs_dir }}/tester_job.yaml"
  ignore_errors: yes

- name: Get the events of the tester namespace
  shell:
    oc get ev -oyaml
       -n {{ rhods_test_namespace }}
       > "{{ artifact_extra_logs_dir }}/tester_events.yaml"
  ignore_errors: yes

- name: Get the events of the notebook namespace
  environment:
    KUBECONFIG: '{{ sut_cluster_kubeconfig }}'
  shell:
    oc get ev -oyaml
       -n {{ rhods_notebook_namespace }}
       > "{{ artifact_extra_logs_dir }}/notebook_events.yaml"
  ignore_errors: yes

- name: Get Minio Pod name
  command: oc get pod -lapp=minio -n minio -ojsonpath={.items[0].metadata.name}
  register: minio_podname_cmd
  ignore_errors: yes

- name: Export the data out of the S3 bucket
  command:
    oc -n minio -c mc exec "{{ minio_podname_cmd.stdout }}"
       -- bash -c 'mkdir -p /artifacts/to_export && mc --config-dir /tmp cp minio/mybucket/ /artifacts/to_export --recursive'
  when: 'rhods_test_jupyterlab_artifacts_collected != "none"'
  ignore_errors: yes

- name: Extract the ODS-CI test artifacts from the Minio S3 container
  shell: |
    set -o pipefail

    oc -n minio -c ubi8 exec "{{ minio_podname_cmd.stdout }}" \
       -- tar czf - -C /artifacts/to_export/ . \
       | tar xzf - -C "{{ artifact_extra_logs_dir }}"

    rm -f "{{ artifact_extra_logs_dir }}/os-release"
  when: 'rhods_test_jupyterlab_artifacts_collected != "none"'
  ignore_errors: yes

- name: Generate MatrixBenchmark files
  shell: |
    (test -z "$(oc get jobs/ods-ci -ojsonpath={.status.failed} -n {{ rhods_test_namespace }})" && echo 0 || echo 1) >  "{{ artifact_extra_logs_dir }}/exit_code"
    cat <<EOF > "{{ artifact_extra_logs_dir }}/settings"
    date=$(date +%Y-%m-%d_%H:%M:%S)
    test_case={{ rhods_test_jupyterlab_ods_ci_test_case }}
    exclude_tags={{ rhods_test_jupyterlab_ods_ci_exclude_tags }}
    user_count={{ rhods_test_jupyterlab_user_count }}
    EOF
  ignore_errors: yes

- name: Show the artifacts directory
  debug: msg="The test artifacts have been stored in {{ artifact_extra_logs_dir }}"

- name: Count successful tests
  shell:
    set -o pipefail;
    cat "{{ artifact_extra_logs_dir }}"/ods-ci/ods-ci-*/test.exit_code | grep '^0$' | wc -l
  register: success_count_cmd
  ignore_errors: yes

- name: Count failed tests
  shell:
    set -o pipefail;
    cat "{{ artifact_extra_logs_dir }}"/ods-ci/ods-ci-*/test.exit_code | grep -v '^0$' | wc -l
  ignore_errors: yes

- name: Show failed tests
  shell: |
    for f in "{{ artifact_extra_logs_dir }}"/ods-ci/ods-ci-*/test.log; do
      echo -e "\n===\n$f\n---"
      egrep 'FAIL|WARN' $f | grep -v "^| FAIL|"
      echo "--> $(cat $(dirname "$f")/test.exit_code)"
      echo "==="
    done > "{{ artifact_extra_logs_dir }}"/failed_tests
  ignore_errors: yes

- name: Save the success count and failed tests
  shell:
    echo "{{ success_count_cmd.stdout }}/{{ rhods_test_jupyterlab_user_count }}"
         > "{{ artifact_extra_logs_dir }}/success_count"

- name: Test if the RHODS test job crashed
  command:
    oc get jobs/ods-ci -ojsonpath={.status.failed} -n {{ rhods_test_namespace }}
  register: check_rhods_test_job
  failed_when: check_rhods_test_job.stdout | length > 0
