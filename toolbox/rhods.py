import sys

from toolbox._common import RunAnsibleRole


ODS_CATALOG_IMAGE_DEFAULT = "quay.io/modh/qe-catalog-source"
ODS_CATALOG_IMAGE_VERSION_DEFAULT = "v160-8"
class RHODS:
    """
    Commands relating to RHODS
    """

    @staticmethod
    def deploy_ods(catalog_image=ODS_CATALOG_IMAGE_DEFAULT,
                   version=ODS_CATALOG_IMAGE_VERSION_DEFAULT):
        """
        Deploy ODS operator from its custom catalog

        Args:
          catalog_image: Optional. Container image containing ODS bundle.
          version: Optional. Version (catalog image tag) of ODS to deploy.
        """

        opts = {
            "rhods_deploy_ods_catalog_image": catalog_image,
            "rhods_deploy_ods_catalog_image_tag": version,
        }

        return RunAnsibleRole("rhods_deploy_ods", opts)

    @staticmethod
    def wait_ods():
        """
        Wait for ODS to finish its deployment
        """

        return RunAnsibleRole("rhods_wait_ods")

    @staticmethod
    def deploy_addon(cluster_name, notification_email, wait_for_ready_state=True):
        """
        Installs the RHODS OCM addon

        Args:
          cluster_name: The name of the cluster where RHODS should be deployed.
          notification_email: The email to register for RHODS addon deployment.
          wait_for_ready_state: Optional. If true (default), will cause the role to wait until addon reports ready state. (Can time out)
        """

        addon_parameters = '[{"id":"notification-email","value":"'+notification_email+'"}]'

        opt = {
            "ocm_deploy_addon_id": "managed-odh",
            "ocm_deploy_addon_cluster_name": cluster_name,
            "ocm_deploy_addon_wait_for_ready_state": wait_for_ready_state,
            "ocm_deploy_addon_parameters": addon_parameters,
        }

        return RunAnsibleRole("ocm_deploy_addon", opt)

    @staticmethod
    def test_jupyterlab(idp_name, username_prefix, user_count: int,
                        secret_properties_file,
                        notebook_url,
                        sut_cluster_kubeconfig="",
                        artifacts_collected="all",
                        ods_sleep_factor="1.0",
                        ods_ci_exclude_tags="None",
                        ods_ci_test_case="test-jupyterlab-run-notebook.robot",
                        notebook_cpu="",
                        notebook_memory=""):
        """
        Test RHODS JupyterLab notebooks

        Args:
          idp_name: Name of the identity provider to use.
          user_count: Number of users to run in parallel
          secret_properties_file: Path of a file containing the properties of LDAP secrets. (See 'deploy_ldap' command)
          notebook_url: URL from which the notebook will be downloaded.
          sut_cluster_kubeconfig: Optional. Path of the system-under-test cluster's Kubeconfig. If provided, the RHODS endpoints will be looked up in this cluster.
          artifacts_collected: Optional. Default 'all'.
           - 'all': collect all the artifacts generated by ODS-CI.
           - 'no-image': exclude the images (.png) from the artifacts collected.
           - 'no-image-except-failed': exclude the images, except if the test failed.
           - 'no-image-except-failed-and-zero': exclude the images, except if the test failed or the job index is zero.
           - 'none': do not collect any ODS-CI artifact.
          ods_sleep_factor: Optional. Delay to sleep between users. Default 1.0.
          ods_ci_test_case: Optional. ODS-CI test case to execute.
          ods_ci_exclude_tags: Optional. Tags to exclude in the ODS-CI test case.
          notebook_cpu: Optional. Number of cores to request for the notebook. The default is in odh-jupyterhub-global-profile.
          notebook_memory: Optional. Amount of memory to request for the notebook. The default is in odh-jupyterhub-global-profile.
        """

        opts = {
            "rhods_test_jupyterlab_idp_name": idp_name,
            "rhods_test_jupyterlab_username_prefix": username_prefix,
            "rhods_test_jupyterlab_user_count": user_count,
            "rhods_test_jupyterlab_secret_properties": secret_properties_file,
            "rhods_test_jupyterlab_notebook_url": notebook_url,
            "rhods_test_jupyterlab_sut_cluster_kubeconfig": sut_cluster_kubeconfig,
            "rhods_test_jupyterlab_artifacts_collected": artifacts_collected,
            "rhods_test_jupyterlab_ods_sleep_factor": ods_sleep_factor,
            "rhods_test_jupyterlab_ods_ci_test_case": ods_ci_test_case,
            "rhods_test_jupyterlab_ods_ci_exclude_tags": ods_ci_exclude_tags,
            "rhods_test_jupyterlab_notebook_cpu": notebook_cpu,
            "rhods_test_jupyterlab_notebook_memory": notebook_memory
        }

        ARTIFACTS_COLLECTED_VALUES = ("all", "none", "no-image", "no-image-except-failed", "no-image-except-failed-and-zero")
        if artifacts_collected not in ARTIFACTS_COLLECTED_VALUES:
            print(f"ERROR: invalid value '{artifacts_collected}' for 'artifacts_collected'. Must be one of {', '.join(ARTIFACTS_COLLECTED_VALUES)}")
            sys.exit(1)

        if (notebook_memory and not notebook_cpu) or (notebook_cpu and not notebook_memory):
            print(f"ERROR: either specify notebook_cpu ({notebook_cpu}) and notebook_memory ({notebook_memory}) or neither of these.")
            sys.exit(1)

        return RunAnsibleRole("rhods_test_jupyterlab", opts)

    @staticmethod
    def undeploy_ods(namespace="redhat-ods-operator", wait: bool = True):
        """
        Undeploy ODS operator

        args:
          wait: Optional. Wait for the operator full deletion.
        """

        opts = {
            "rhods_undeploy_ods_wait": wait,
        }

        return RunAnsibleRole("rhods_undeploy_ods", opts)

    @staticmethod
    def cleanup_aws():
        """
        Cleanup AWS from RHODS dangling resources
        """

        return RunAnsibleRole("rhods_cleanup_aws")

    @staticmethod
    def reset_prometheus_db():
        """
        Resets RHODS Prometheus database, by destroying its Pod.
        """

        opts = {
            "cluster_prometheus_db_mode": "reset",
            "cluster_prometheus_db_label": "deployment=prometheus",
            "cluster_prometheus_db_namespace": "redhat-ods-monitoring",
        }

        return RunAnsibleRole("cluster_prometheus_db", opts)

    @staticmethod
    def dump_prometheus_db():
        """
        Dump Prometheus database into a file
        """

        opts = {
            "cluster_prometheus_db_mode": "dump",
            "cluster_prometheus_db_label": "deployment=prometheus",
            "cluster_prometheus_db_namespace": "redhat-ods-monitoring",
            "cluster_prometheus_db_directory": "/prometheus/data",

        }

        return RunAnsibleRole("cluster_prometheus_db", opts)

    @staticmethod
    def capture_state():
        """
        Capture information about the cluster and the RHODS deployment
        """

        return RunAnsibleRole("rhods_capture_state")
