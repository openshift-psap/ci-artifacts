#!/bin/bash -e
#
# This file serves as the default command to the openshift-ansible image.
# Runs a playbook with inventory as specified by environment variables.
#
# SOURCE and HOME DIRECTORY: /opt/ci-artifacts/src

set -o pipefail
set -o errexit
set -o nounset

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    git show --quiet || echo "Could not access git history ..."
    echo
    git show HEAD~ --quiet || true

    echo
    oc version
    echo
}

prechecks() {
    if [[ "${INSIDE_CI_IMAGE:-}" != "y" ]]; then
        echo "FATAL: this script shouldn't run outside of the CI image ..."
        exit 1
    fi

    if [[ -z "${KUBECONFIG}" ]]
    then
        echo "No KUBECONFIG set, cannot continue."
        exit 1
    fi
    if [[ ! -e "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG file doesn't exist, can't continue. ($KUBECONFIG)"
        exit 1
    fi
    echo "Kubeconfig found at ${KUBECONFIG}, proceeding with tests"

    if ! which oc &>/dev/null;
    then
        echo "OpenShift client not found, downloading it ..."
        mkdir -p bin
        cd bin
        wget --quiet https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux.tar.gz
        tar xf openshift-client-linux.tar.gz
        rm openshift-client-linux.tar.gz
        export PATH=$PWD:$PATH
        cd ..
    fi

    if ! which kubectl &>/dev/null;
    then
        echo "kubectl not found, symlinking to oc"
        mkdir -p bin
        cd bin
        ln -s $(which oc) kubectl
        export PATH=$PWD:$PATH
        cd ..
    fi

    if ! which helm &>/dev/null;
    then
        echo "Helm not found, downloading it ..."
        mkdir -p bin
        cd bin

        HELM_VERSION="v3.5.1"
        wget https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz --quiet
        tar xf helm-${HELM_VERSION}-linux-amd64.tar.gz linux-amd64/helm
        mv linux-amd64/helm .
        rmdir linux-amd64
        export PATH=$PWD:$PATH
        cd ..
    fi

    if ! which operator-sdk &>/dev/null;
    then
        echo "OperatorSDK not found, downloading it ..."
        export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
        export OS=$(uname | awk '{print tolower($0)}')

        mkdir -p bin
        cd bin
        export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v1.6.2
        curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}

        chmod +x operator-sdk_${OS}_${ARCH}
        mv operator-sdk_${OS}_${ARCH} operator-sdk
        export PATH=$PWD:$PATH
        cd ..
    fi
}



##############

prechecks
ci_banner "$@"

#############

if [ -z "${ARTIFACT_DIR:-}" ]; then
    echo "No ARTIFACT_DIR configured."
else
    echo "Using '$ARTIFACT_DIR' to store the test artifacts"
fi

if [ $1 == "gpu-operator_test-master-branch" ]; then
        target="gpu-operator"
        action="test_master_branch"
        shift 1
elif [ $1 == "gpu-operator_test-operatorhub" ]; then
        target="gpu-operator"
        action="test_operatorhub"
        shift 1
elif [ $1 == "gpu-operator_test-helm" ]; then
        target="gpu-operator"
        action="test_helm"
        shift 1
elif [ $1 == "gpu-operator_undeploy-operatorhub" ]; then
        target="gpu-operator"
        action="undeploy_operatorhub"
        shift 1
else
        script_name="$0"
        target="$1"
        action="$2"
        shift 2
fi

set -x

export ENTRY_LIB_DIR="/var/lib/ci-artifacts/entrypoints.d"
case ${target:-} in
    "gpu-operator")
        $ENTRY_LIB_DIR/gpu_operator_run_libs.sh $action "$@"
	exit 0
        ;;
    "sro")
        $ENTRY_LIB_DIR/sro_run_libs.sh $action "$@"
	exit 0
        ;;
    "cluster-upgrade")
        if [ -z "${CLUSTER_UPGRADE_TARGET_IMAGE:-}" ]; then
            echo "FATAL: CLUSTER_UPGRADE_TARGET_IMAGE must be provided to upgrade the cluster"
            exit 1
        fi
        toolbox/cluster/upgrade_to_image.sh "$CLUSTER_UPGRADE_TARGET_IMAGE"
        exit 0
        ;;
    -*)
        echo "Unknown option: ${target:-}"
        exit 1
        ;;

    *)
	echo "Nothing to do ..."
        exit 1
	;;
esac

exit 1
