#! /usr/bin/env bash
#
# This file serves as entrypoint to the nightly testing of PSAP operators.
#
# SOURCE and HOME DIRECTORY: /opt/ci-artifacts/src

set -o pipefail
set -o errexit
set -o nounset

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    git show --quiet || echo "Could not access git history ..."
    echo
    git show HEAD~ --quiet || true

    echo
    echo OpenShift version:
    if ! oc version; then
        echo "Cannot access OpenShift cluster, can't continue."
        exit 1
    fi
    echo
}

prechecks() {
    if [[ "${INSIDE_CI_IMAGE:-}" != "y" ]]; then
        echo "FATAL: this script shouldn't run outside of the CI image ..."
        echo "INFO: 'export INSIDE_CI_IMAGE=y' to force"
        exit 1
    fi
    if [ -z "${ARTIFACT_DIR:-}" ]; then
        echo "ARTIFACT_DIR not set, cannot configured."
        exit 1
    fi
    if [[ -z "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG not set, cannot continue."
        exit 1
    fi
    if [[ ! -e "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG file doesn't exist, can't continue. (KUBECONFIG=${KUBECONFIG})"
        exit 1
    fi
    echo "Using KUBECONFIG=${KUBECONFIG}"

    if ! which oc &>/dev/null;
    then
        echo "oc not found, this is unexpected in the CI image. Can't continue."
        exit 1
    fi

    if ! which kubectl &>/dev/null;
    then
        echo "kubectl not found, symlinking to oc"
        mkdir -p bin
        cd bin
        ln -s $(which oc) kubectl
        export PATH=$PWD:$PATH
        cd ..
    fi
}

postchecks() {
    set +x

    reason=$1
    shift

    if [[ "$reason" == ERR ]]; then
        touch $ARTIFACT_DIR/FAILURE

        if ! oc version >/dev/null 2>&1; then
            echo "Cluster unreachable" > $ARTIFACT_DIR/UNREACHABLE
        fi
    elif [[ "$reason" == EXIT ]]; then
        if [ ! -e "$ARTIFACT_DIR/FAILURE" ]; then
            echo "Test of '$@' succeeded."
        else
            echo "Test of '$@' failed."
        fi
    fi
}

##############

ci_banner "$@"
prechecks

trap "postchecks EXIT $*" EXIT
trap "postchecks ERR" ERR

#############

target="${1:-}"
shift
action="${1:-}"
echo
echo "Test target: '$target'; test action: '$action'"
echo

case ${target} in
    "cluster")
        ci_entrypoint_cluster.sh "$action" "$@"
        exit 0
        ;;
    "gpu-operator")
        ci_entrypoint_gpu-operator.sh "$action" "$@"
        exit 0
        ;;
    "nfd-operator")
        ci_entrypoint_nfd-operator.sh "$action" "$@"
        exit 0
        ;;
    "nto")
        ci_entrypoint_nto.sh "$action" "$@"
        exit 0
        ;;
    "sro")
        ci_entrypoint_sro.sh "$action" "$@"
        exit 0
        ;;
    *)
        echo "FATAL: Unknown target \"${target}\""
        exit 1
	;;
esac

echo "FATAL: Unreachable ... (target: $target)"
exit 1
