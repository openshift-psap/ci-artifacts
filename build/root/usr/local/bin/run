#!/bin/bash -e
#
# This file serves as the default command to the openshift-ansible image.
# Runs a playbook with inventory as specified by environment variables.
#
# SOURCE and HOME DIRECTORY: /opt/ci-artifacts/src

set -o pipefail
set -o errexit
set -o nounset

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    git show --quiet || echo "Could not access git history ..."
    echo
    git show HEAD~ --quiet || true

    echo
    echo OpenShift version:
    if ! oc version > /dev/null; then
        echo "Cannot access OpenShift cluster, can't continue."
        exit 1
    fi
    echo
}

prechecks() {
    if [[ "${INSIDE_CI_IMAGE:-}" != "y" ]]; then
        echo "FATAL: this script shouldn't run outside of the CI image ..."
        exit 1
    fi

    if [[ -z "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG not set, cannot continue."
        exit 1
    fi
    if [[ ! -e "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG file doesn't exist, can't continue. (KUBECONFIG=${KUBECONFIG})"
        exit 1
    fi
    echo "Using KUBECONFIG=${KUBECONFIG}"

    if ! which oc &>/dev/null;
    then
        echo "oc not found, this is unexpected in the CI image. Can't continue."
        exit 1
    fi

    if ! which kubectl &>/dev/null;
    then
        echo "kubectl not found, symlinking to oc"
        mkdir -p bin
        cd bin
        ln -s $(which oc) kubectl
        export PATH=$PWD:$PATH
        cd ..
    fi
}



##############

ci_banner "$@"
prechecks

#############

if [ -z "${ARTIFACT_DIR:-}" ]; then
    echo "No ARTIFACT_DIR configured."
else
    echo "Using '$ARTIFACT_DIR' to store the test artifacts"
fi

if [ $1 == "gpu-operator_test-master-branch" ]; then
        target="gpu-operator"
        action="test_master_branch"
        shift 1
elif [ $1 == "gpu-operator_test-operatorhub" ]; then
        target="gpu-operator"
        action="test_operatorhub"
        shift 1
elif [ $1 == "gpu-operator_test-helm" ]; then
        target="gpu-operator"
        action="test_helm"
        shift 1
elif [ $1 == "gpu-operator_undeploy-operatorhub" ]; then
        target="gpu-operator"
        action="undeploy_operatorhub"
        shift 1
else
        script_name="$0"
        target="$1"
        action="$2"
        shift 2
fi

set -x

export ENTRY_LIB_DIR="/var/lib/ci-artifacts/entrypoints.d"
case ${target:-} in
    "gpu-operator")
        $ENTRY_LIB_DIR/gpu_operator_run_libs.sh $action "$@"
	exit 0
        ;;
    "sro")
        $ENTRY_LIB_DIR/sro_run_libs.sh $action "$@"
	exit 0
        ;;
    "cluster-upgrade")
        if [ -z "${CLUSTER_UPGRADE_TARGET_IMAGE:-}" ]; then
            echo "FATAL: CLUSTER_UPGRADE_TARGET_IMAGE must be provided to upgrade the cluster"
            exit 1
        fi
        toolbox/cluster/upgrade_to_image.sh "$CLUSTER_UPGRADE_TARGET_IMAGE"
        exit 0
        ;;
    -*)
        echo "Unknown option: ${target:-}"
        exit 1
        ;;

    *)
	echo "Nothing to do ..."
        exit 1
	;;
esac

exit 1
