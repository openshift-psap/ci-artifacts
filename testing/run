#! /usr/bin/env bash
#
# This file serves as entrypoint to the CI testing

set -o pipefail
set -o errexit
set -o nounset

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    echo ""
    git show --quiet --oneline HEAD $(git log --pretty=%P -n 1 HEAD || true) || echo "Could not access git history ..."
    echo
}

prechecks() {
    if [ -z "${ARTIFACT_DIR:-}" ]; then
        if [[ "${INSIDE_CI_IMAGE:-}" == "y" ]]; then
            echo "ARTIFACT_DIR not set, cannot proceed without inside the image."
            false
        fi

        export ARTIFACT_DIR="/tmp/ci-artifacts_$(date +%Y%m%d)"
        mkdir -p "$ARTIFACT_DIR"

        echo "Using ARTIFACT_DIR=$ARTIFACT_DIR as default artifacts directory."
    else
        echo "Using ARTIFACT_DIR=$ARTIFACT_DIR."
    fi

    if ! oc version; then
        if [[ -z "${KUBECONFIG}" ]]
        then
            echo "KUBECONFIG not set, cannot continue."
            false
        fi
        if [[ ! -e "${KUBECONFIG}" ]]
        then
            echo "KUBECONFIG file doesn't exist, can't continue. (KUBECONFIG=${KUBECONFIG})"
            false
        fi
        echo "Using KUBECONFIG=${KUBECONFIG}"
    fi

    if ! which oc &>/dev/null;
    then
        echo "oc not found, this is unexpected in the CI image. Can't continue."
        false
    fi

    if ! which jq &>/dev/null;
    then
        echo "jq not found. Can't continue."
        false
    fi

    if ! which kubectl &>/dev/null;
    then
        echo "kubectl not found, symlinking to oc"
        mkdir -p bin
        cd bin
        if [[ ! -f kubectl ]]; then
            ln --symbolic $(which oc) kubectl
        fi
        export PATH=$PWD:$PATH
        which kubectl # fail is still not working
        cd ..
    fi

    # avoid incorrect error reporting (mostly for outside of CI)
    rm -f "${ARTIFACT_DIR}/FAILURE"

    # store `ci-artifacts` version in use
    (git describe HEAD --long --always || echo "git missing") > ${ARTIFACT_DIR}/ci_artifact.git_version

    # check that the OCP cluster can be reached
    ocp_version=$(oc version -o json | jq --raw-output '.openshiftVersion' || true)
    if [[ -z "$ocp_version" ]]; then
        echo "Cluster cannot be accessed. Can't continue."
        false
    fi

    # store the OCP version of the cluster
    echo "$ocp_version" > ${ARTIFACT_DIR}/ocp.version
}

postchecks() {
    reason=$1
    shift

    if [[ "$reason" == ERR ]]; then
        touch $ARTIFACT_DIR/FAILURE

        if ! oc version >/dev/null 2>&1; then
            mkdir -p $ARTIFACT_DIR/FLAKE
            echo "Cluster unreachable" >> $ARTIFACT_DIR/FLAKE
        fi
    elif [[ "$reason" == EXIT ]]; then
        echo ""
        if [ ! -e "$ARTIFACT_DIR/FAILURE" ]; then
            echo "Test of '$@' succeeded."
        else
            echo "Test of '$@' failed."
        fi
    fi
}

list_available() {
    target_entrypoint_dir=${1:-}
    shift || true
    target_entrypoint_file=${1:-}

    fmt() {
        sed 's/.sh$//g' | sed 's/^/- /'
    }
    if [[ -f "$target_entrypoint_file" ]]; then
        echo "$target_entrypoint_file is an entrypoint."

    elif [[ -d "$target_entrypoint_dir" ]]; then
        echo "Available '$(basename $target_entrypoint_dir)' entrypoint points:"
        ls "$target_entrypoint_dir" | fmt
    else
        echo "Available base entrypoint points:"
        ls "$THIS_DIR" | grep -v '^run$' | fmt
    fi
}

##############

if [[ $HOSTNAME == "addon-tests"* ]]; then
    # Running inside OSDE2E CI
    # Even though this repo is not mainly used for osde2e, it was decided to
    # have artifacts dir used by osde2e as the default, because passing
    # arguments is limited in osde2e
    echo "INFO: Running in OSDE2E addon test CI. Preparing for OSDE2E ..."
    set -- "osde2e" "gpu-addon"
    export ARTIFACT_DIR="/test-run-results"
fi

##############

if [[ "${INSIDE_RUN:-}" != "y" ]]; then
    ci_banner "$@"
    prechecks
    echo

    trap "postchecks EXIT $*" EXIT
    trap "postchecks ERR" ERR

    export INSIDE_RUN=y
fi

#############

if [[ -z "${1:-}" ]]; then
    echo
    echo "FATAL: No entrypoint provided ..."
    echo
    list_available

    false
fi

target="${1}"
shift
second_target="${1:-}"

# Note: do not 'exec' into the entrypoint, so that 'postchecks' can be
# executed on exit.

target_entrypoint_file="${THIS_DIR}/${target}.sh"
if [[ -e "${target_entrypoint_file}" ]]; then
    "${target_entrypoint_file}" "$@"

    exit 0
fi

target_entrypoint_dir="${THIS_DIR}/${target}"
target_entrypoint_file="${target_entrypoint_dir}/${second_target}.sh"

if [[ -e "${target_entrypoint_file}" ]]; then
    shift # eat second_target

    "${target_entrypoint_file}" "$@"
    exit 0
fi

echo
echo "FATAL: Unknown entrypoint '${target}' | $@"
echo
list_available "$target_entrypoint_dir"

false
