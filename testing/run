#! /usr/bin/env bash
#
# This file serves as entrypoint to the CI testing

set -o pipefail
set -o errexit
set -o nounset

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    echo ""
    if [ "${INSIDE_CI_IMAGE:-}" == "y" ]; then
        if [[ "${PULL_BASE_SHA:-}" && "${PULL_PULL_SHA:-}" ]]; then
            git show --quiet --oneline ${PULL_BASE_SHA:-}..${PULL_PULL_SHA:-} 2>/dev/null \
                || echo "WARNING: Could not access git history (${PULL_BASE_SHA:-}..${PULL_PULL_SHA:-}) ..."
        else
            echo "WARNING: PULL_BASE_SHA=${PULL_BASE_SHA:-} and/or PULL_PULL_SHA=${PULL_PULL_SHA:-} not set. Showing only the HEAD commit."
            git show --quiet --oneline
        fi
    fi
}

prechecks() {
    if [ -z "${ARTIFACT_DIR:-}" ]; then
        if [[ "${INSIDE_CI_IMAGE:-}" == "y" ]]; then
            echo "ARTIFACT_DIR not set, cannot proceed without inside the image."
            false
        fi

        export ARTIFACT_DIR="/tmp/ci-artifacts_$(date +%Y%m%d)"
        mkdir -p "$ARTIFACT_DIR"

        echo "Using ARTIFACT_DIR=$ARTIFACT_DIR as default artifacts directory."
    else
        echo "Using ARTIFACT_DIR=$ARTIFACT_DIR."
    fi

    if [ -e "$ARTIFACT_DIR/FAILURES" ]; then
        echo "File '$ARTIFACT_DIR/FAILURES' already exists, cannot continue."
        exit 1
    fi

    if [ "${PERFLAB_CI:-}" == true ]; then
        LOG_FILE=$ARTIFACT_DIR/run.log
        if [[ -f "$LOG_FILE" ]]; then
            mkdir -p "$ARTIFACT_DIR/_WARNING"
            msg="WARNING: run: log file $LOG_FILE already exists"
            echo $msg | tee -a "$run_log_file_already_exists"

        fi
        exec &> >(tee -a "$LOG_FILE")
    fi

    if [ "${OPENSHIFT_CI:-}" == true ]; then
        DEST="${ARTIFACT_DIR}/variable_overrides"
        "$THIS_DIR/utils/openshift_ci/pr_args.sh" "$DEST"
        if [[ -f "$DEST" ]]; then
            echo "Variables overriden from PR:"
            cat "$DEST"
            echo "---"
        fi
    fi

    if ! oc version; then
        if [[ -z "${KUBECONFIG}" ]]
        then
            echo "KUBECONFIG not set, cannot continue."
            false
        fi
        if [[ ! -e "${KUBECONFIG}" ]]
        then
            echo "KUBECONFIG file doesn't exist, can't continue. (KUBECONFIG=${KUBECONFIG})"
            false
        fi
        echo "Using KUBECONFIG=${KUBECONFIG}"
    fi

    if ! which oc &>/dev/null;
    then
        echo "oc not found, this is unexpected in the CI image. Can't continue."
        false
    fi

    if ! which jq &>/dev/null;
    then
        echo "jq not found. Can't continue."
        false
    fi

    if ! which kubectl &>/dev/null;
    then
        echo "kubectl not found, symlinking to oc"
        mkdir -p bin
        cd bin
        if [[ ! -f kubectl ]]; then
            ln --symbolic $(which oc) kubectl
        fi
        export PATH=$PWD:$PATH
        which kubectl # fail is still not working
        cd ..
    fi

    # avoid incorrect error reporting (mostly for outside of CI)
    rm -f "${ARTIFACT_DIR}/FAILURE"

    # store `ci-artifacts` version in use
    (git describe HEAD --long --always || echo "git missing") > ${ARTIFACT_DIR}/ci_artifact.git_version

    if [[ "${PULL_NUMBER:-}" ]]; then
        PR_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PULL_NUMBER"
        PR_COMMENTS_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$PULL_NUMBER/comments"

        curl -sSf "$PR_URL" -o "${ARTIFACT_DIR}/pull_request.json" || echo "WARNING: Failed to download the PR from $PR_URL"
        curl -sSf "$PR_COMMENTS_URL" -o "${ARTIFACT_DIR}/pull_request-comments.json" || echo "WARNING: Failed to download the PR comments from $PR_COMMENTS_URL"
    fi

    # check that the OCP cluster can be reached
    ocp_version=$(oc version -o json | jq --raw-output '.openshiftVersion' || true)
    if [[ -z "$ocp_version" ]]; then
        echo "Cluster cannot be accessed. Can't continue."
        false
    fi

    # store the OCP version of the cluster
    echo "$ocp_version" > ${ARTIFACT_DIR}/ocp.version
}

postchecks() {
    reason=$1
    shift

    if [[ "$reason" == ERR ]]; then
        find "$ARTIFACT_DIR" -name FAILURE -exec cat {} \; > "$ARTIFACT_DIR/FAILURES"
        touch "$ARTIFACT_DIR/FAILURES"

        if ! oc version >/dev/null 2>&1; then
            mkdir -p "$ARTIFACT_DIR/_FLAKE"
            echo "Cluster unreachable" >> "$ARTIFACT_DIR/_FLAKE/cluster_unreachable"
        fi
    elif [[ "$reason" == EXIT ]]; then
        echo ""
        if [[ "${start_time:-}" ]]; then
            local end_time=$(date +%s)
            local duration_seconds=$((end_time - start_time))
            local duration="after $(date -d "1970-01-01 + $duration_seconds seconds" "+%H hours %M minutes %S seconds")"
        else
            local duration="(start_time missing :/)"
        fi
        if [ ! -e "$ARTIFACT_DIR/FAILURES" ]; then
            echo "$(date) Test of '$@' succeeded $duration." | tee "$ARTIFACT_DIR/FINISHED"
        else
            echo "$(date) Test of '$@' failed after $duration." | tee "$ARTIFACT_DIR/FINISHED"
        fi
    fi
}

list_available() {
    target_entrypoint_dir=${1:-}
    shift || true
    target_entrypoint_file=${1:-}

    fmt() {
        sed 's/.sh$//g' | sed 's/^/- /'
    }
    if [[ -f "$target_entrypoint_file" ]]; then
        echo "$target_entrypoint_file is an entrypoint."

    elif [[ -d "$target_entrypoint_dir" ]]; then
        echo "Available '$(basename $target_entrypoint_dir)' entrypoint points:"
        ls "$target_entrypoint_dir" | fmt
    else
        echo "Available base entrypoint points:"
        ls "$THIS_DIR" | grep -v '^run$' | fmt
    fi
}

##############

if [[ "${INSIDE_RUN:-}" != "y" ]]; then
    ci_banner "$@"
    prechecks
    echo

    trap "postchecks EXIT $*" EXIT
    trap "postchecks ERR" ERR

    export INSIDE_RUN=y
fi

#############

echo "$(date) Test of '$@' started." | tee "$ARTIFACT_DIR/STARTED"
start_time=$(date +%s)

if [[ -z "${1:-}" ]]; then
    echo
    echo "FATAL: No entrypoint provided ..."
    echo
    list_available

    false
fi

target="${1}"
shift
second_target="${1:-}"

# Note: do not 'exec' into the entrypoint, so that 'postchecks' can be
# executed on exit.

target_entrypoint_file="${THIS_DIR}/${target}.sh"
if [[ -e "${target_entrypoint_file}" ]]; then
    "${target_entrypoint_file}" "$@"

    exit 0
fi

target_entrypoint_dir="${THIS_DIR}/${target}"

target_entrypoint_file="${target_entrypoint_dir}/${second_target}"

if [[ -e "${target_entrypoint_file}" ]]; then
    shift # eat second_target

    "${target_entrypoint_file}" "$@"
    exit 0
fi

target_entrypoint_file_py="${target_entrypoint_dir}/${second_target}.py"

if [[ -e "${target_entrypoint_file_py}" ]]; then
    shift # eat second_target

    "${target_entrypoint_file_py}" "$@"
    exit 0
fi

target_entrypoint_file_sh="${target_entrypoint_dir}/${second_target}.sh"

if [[ -e "${target_entrypoint_file_sh}" ]]; then
    shift # eat second_target

    "${target_entrypoint_file_sh}" "$@"
    exit 0
fi

echo
echo "FATAL: Unknown entrypoint '${second_target}' inside '${target}' directory | $@"
echo
list_available "$target_entrypoint_dir"

false
