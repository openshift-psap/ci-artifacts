#! /usr/bin/env bash
#
# This file serves as entrypoint to the CI testing

set -o pipefail
set -o errexit
set -o nounset

ci_banner() {
    echo "===> Running PSAP CI Test suite <==="

    echo "===> $0 $@ <=="

    echo ""
    git show --quiet --oneline HEAD $(git log --pretty=%P -n 1 HEAD || true) || echo "Could not access git history ..."

    echo
    echo OpenShift version:
    if ! oc version; then
        echo "Cannot access OpenShift cluster, can't continue."
        false
    fi
    echo
}

prechecks() {
    if [ -z "${ARTIFACT_DIR:-}" ]; then
        echo "ARTIFACT_DIR not set, cannot configured."
        false
    fi
    if [[ -z "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG not set, cannot continue."
        false
    fi
    if [[ ! -e "${KUBECONFIG}" ]]
    then
        echo "KUBECONFIG file doesn't exist, can't continue. (KUBECONFIG=${KUBECONFIG})"
        false
    fi
    echo "Using KUBECONFIG=${KUBECONFIG}"

    if ! which oc &>/dev/null;
    then
        echo "oc not found, this is unexpected in the CI image. Can't continue."
        false
    fi

    if ! which kubectl &>/dev/null;
    then
        echo "kubectl not found, symlinking to oc"
        mkdir -p bin
        cd bin
        ln -s $(which oc) kubectl
        export PATH=$PWD:$PATH
        cd ..
    fi

    # avoid incorrect error reporting (mostly for outside of CI)
    rm -f "${ARTIFACT_DIR}/FAILURE"
}

postchecks() {
    reason=$1
    shift

    if [[ "$reason" == ERR ]]; then
        touch $ARTIFACT_DIR/FAILURE

        if ! oc version >/dev/null 2>&1; then
            echo "Cluster unreachable" > $ARTIFACT_DIR/UNREACHABLE
        fi
    elif [[ "$reason" == EXIT ]]; then
        echo ""
        if [ ! -e "$ARTIFACT_DIR/FAILURE" ]; then
            echo "Test of '$@' succeeded."
        else
            echo "Test of '$@' failed."
        fi
    fi
}

##############

ci_banner "$@"
prechecks

trap "postchecks EXIT $*" EXIT
trap "postchecks ERR" ERR

#############

if [[ -z "${1:-}" ]]; then
    echo "FATAL: No entrypoint provided ..."

    false
fi

target="${1}"
shift

echo
echo "Test target: '$target'"
echo

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

target_entrypoint="$THIS_DIR/nightly/${target}.sh"

if [[ ! -e "$target_entrypoint" ]]; then
    echo "FATAL: Unknown entrypoint '${target}'"

    false
fi

# do not 'exec' here, so that 'postchecks' can be executed on exit
${target_entrypoint} "$@"
